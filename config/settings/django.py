"""
Django settings for trader_bot project.

Generated by 'django-admin startproject' using Django 3.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""
import logging
import os

from .env import env

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str('SECRET_KEY', default='qwerty')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DEBUG', default=False) # necesary to change in .env DEBUG=off

ALLOWED_HOSTS = [
    "127.0.0.1",
    "localhost",
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'modeltranslation',
    'django.contrib.admin',
    'django_apscheduler',
    'bot',
    'user',
    'order',
    'trade',
    'silk',

]

APSCHEDULER_DATETIME_FORMAT = "N j, Y, f:s a"


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'silk.middleware.SilkyMiddleware',
    'rollbar.contrib.django.middleware.RollbarNotifierMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases


DATABASES = {
    'default': env.db('DATABASE_URL')
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/
#LANGUAGE_CODE = 'ru-ru'
LANGUAGE_CODE = 'en-us'


gettext = lambda s: s
LANGUAGES = [
    ('ru', 'Russian'),
    ('en', 'English'),
]

MODELTRANSLATION_TRANSLATION_REGISTRY = 'bot.translation'


TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/
_SETTINGS_DIR = os.path.dirname(os.path.abspath(__file__))
_CONFIG_DIR = os.path.dirname(_SETTINGS_DIR)
PROJECT_DIR = os.path.dirname(_CONFIG_DIR)
STATIC_ROOT = os.path.join(PROJECT_DIR, 'static')
STATIC_URL = '/static/'


POST_SERVER_ITEM_ACCESS_TOKEN = '4ae1bed48b524ba4b7e1e22315bdbd6f' #'ff446ee4-661d-4bbd-9094-5276955bd39d'
ROLLBAR = {
    'access_token': 'POST_SERVER_ITEM_ACCESS_TOKEN',
    'environment':  'production',
    'branch': 'log',
    'root':  'log/config/settings/django.py',
}

DJANGO_LOG_LEVEL = 'INFO'
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '[{asctime}] ({module}.{filename}:{lineno} {thread:d}|{process:d}) [{levelname}]: {message}',
            'style': '{',
        },
    },
    'filters': {
      'require_debug_false': {
          '()': 'django.utils.log.RequireDebugFalse',
      },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'rollbar': {
            'filters': ['require_debug_false'],
            'accsess_token': 'POST_SERVER_ITEM_ACCESS_TOKEN',
            'enviroment': 'production',
            'class': 'rollbar.logger.RollbarHandler',
        },
        'jobs': {
            'formatter': 'verbose',
            'filters': ['require_debug_false'],
            'level': 'INFO',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': 'logs/jobs.log',
            'when': 'midnight',
            'utc': True,
            'backupCount': 7
        },
        'trade_event': {
            'formatter': 'verbose',
            'filters': ['require_debug_false'],
            'level': 'INFO',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': 'logs/trade_event.log',
            'when': 'midnight',
            'utc': True,
            'backupCount': 7
        },
        'trade_operations': {
            'formatter': 'verbose',
            'filters': ['require_debug_false'],
            'level': 'DEBUG',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': 'logs/trade_operations.log',
            'when': 'midnight',
            'utc': True,
            'backupCount': 7
        },
        'trade_errors': {
            'formatter': 'verbose',
            'filters': ['require_debug_false'],
            'level': 'WARNING',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': 'logs/trade_errors.log',
            'when': 'midnight',
            'utc': True,
            'backupCount': 7
        },
    },
    'loggers': {
        'pyrogram.client.ext.syncer': {
            'handlers': ['console'],
            'level': 'WARNING',
            'propagate': False,
        },
        'pyrogram.session.session': {
            'handlers': ['console'],
            'level': 'WARNING',
            'propagate': False,
        },
        'pyrogram': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'TradeJobs': {
            'handlers': ['console', 'jobs'],
            'level': 'INFO',
            'propagate': False,
        },
        'TradeEvent': {
            'handlers': ['console', 'trade_event'],
            'level': 'INFO',
            'propagate': False,
        },
        'TradeOperations': {
            'handlers': ['console', 'trade_operations'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'TradeErrors': {
            'handlers': ['console', 'trade_errors', 'rollbar'],
            'level': 'WARNING',
            'propagate': False,
        },
    },
}