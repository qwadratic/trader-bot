from decimal import Decimal
from time import sleep
import math

from mintersdk.shortcuts import to_bip, to_pip
from pyrogram import InlineKeyboardMarkup, InlineKeyboardButton

from blockchain import ethAPI, minterAPI
from bot_tools import converter
from bot_tools.converter import currency_in_usd
from bot_tools.help import broadcast_action, correct_name, get_balance_from_currency
from trade_errors import InsufficientFundsUser, InsufficientFundsOwner, MinterErrorTransaction, EthErrorTransaction
from keyboard import trade_kb
from model import Announcement, PaymentCurrency, Trade, User, VirtualWallet, TempPaymentCurrency, TempAnnouncement, \
    HoldMoney, Wallet, UserPurse
from text import trade_text

from datetime import datetime as dt


def check_wallet_on_payment(cli, wallet, user_tg_id, trade_id):
    # tg_id = User.get_by_id(user_id).tg_id
    transaction = True

    if transaction:
        cli.send_message(user_tg_id, '–û–ø–ª–∞—Ç–∞ –ø—Ä–∏—à–ª–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—à–µ–ª–µ–∫!',
                         reply_markup=trade_kb.confirm_paymend_from_buyer(trade_id))


def create_announcement(temp_announcement):
    user = temp_announcement.user
    trade_currency = temp_announcement.trade_currency
    announcement = Announcement.create(user_id=user.id,
                                       type_operation=temp_announcement.type_operation,
                                       trade_currency=trade_currency,
                                       amount=temp_announcement.amount,
                                       exchange_rate=temp_announcement.exchange_rate,
                                       status='close')

    temp_payment_currency = TempPaymentCurrency.select().where(TempPaymentCurrency.user_id == user.id)

    for curr in temp_payment_currency:
        PaymentCurrency.create(announcement=announcement.id,
                               payment_currency=curr.payment_currency)

    TempAnnouncement.delete().where(TempAnnouncement.user_id == user.id).execute()
    TempPaymentCurrency.delete().where(TempPaymentCurrency.user_id == user.id).execute()

    return announcement


def get_max_limit(temp_announcement):
    user = temp_announcement.user

    if temp_announcement.type_operation_id == 'sale':
        trade_currency = temp_announcement.trade_currency
        trade_amount = temp_announcement.amount
        rate = temp_announcement.exchange_rate

        virt_balance = VirtualWallet.get(user_id=user.id, currency=trade_currency)


def deal_info(announc_id):
    trade_direction = {'buy': {'type': '–ü–æ–∫—É–ø–∫–∞',
                               'icon': 'üìà'},
                       'sale': {'type': '–ü—Ä–æ–¥–∞–∂–∞',
                                'icon': 'üìâ'}}
    status = {'open': '‚ö™Ô∏è –ê–∫—Ç–∏–≤–Ω–æ',
              'close': 'üî¥ –û—Ç–∫–ª—é—á–µ–Ω–æ'}

    announcement = Announcement.get(id=announc_id)
    type_operation = announcement.type_operation
    trade_currency = announcement.trade_currency
    announc_status = announcement.status
    amount = to_bip(announcement.amount)
    price_for_currency = currency_in_usd(trade_currency, 1)
    payment_currency = PaymentCurrency.select().where(PaymentCurrency.announcement_id == announc_id)

    txt = f'üì∞Ô∏è  –û–±—ä—è–≤–ª–µ–Ω–∏–µ {announcement.id}\n\n' \
        f'**{trade_direction[type_operation]["type"]} {trade_currency} {trade_direction[type_operation]["icon"]}**\n\n' \
        f'**–°—Ç–æ–∏–º–æ—Å—Ç—å:** {to_bip(announcement.exchange_rate) * amount} USD\n' \
        f'**–°—É–º–º–∞**: {amount} {trade_currency}\n\n' \
        f'–¶–µ–Ω–∞ –∑–∞ 1 {trade_currency}  {to_bip(announcement.exchange_rate)} USD\n\n' \
        f'**–ü–ª–∞—Ç—ë–∂–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:**\n'

    for curr in payment_currency:
        txt += f'**{curr.payment_currency}**\n'
    txt += f'\n\n**–°—Ç–∞—Ç—É—Å:** {status[announc_status]}'

    return txt


def announcement_list_kb(type_operation, offset):
    if type_operation == 'buy':
        order_by = Announcement.exchange_rate.desc()
    else:
        order_by = Announcement.exchange_rate

    anc = Announcement
    announcs = (Announcement
                .select()
                .where(
        (Announcement.id.not_in(Trade.select(Trade.announcement_id).where(Trade.status == 'in processing')))
        & (Announcement.type_operation == type_operation)
        & (Announcement.status == 'open'))
                .order_by(order_by)
                .offset(offset)
                .limit(7))

    all_announc = (Announcement
                   .select()
                   .where(
        (Announcement.id.not_in(Trade.select(Trade.announcement_id).where(Trade.status == 'in processing')))
        & (Announcement.type_operation == type_operation)
        & (Announcement.status == 'open'))
                   .order_by(order_by)
                   )

    # icon = {1: '‚ìÇÔ∏è', 2: 'üèµ',
    #         3: 'üí∏', 4: '',
    #         5: '', 6: '',
    #         7: ''}

    buttons = {'buy': {'name': '–°–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É',
                       'cb': 'sale'},
               'sale': {'name': '–°–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞ –ø–æ–∫—É–ø–∫—É',
                        'cb': 'buy'}}

    kb_list = []
    kb_list.append([InlineKeyboardButton(buttons[type_operation]['name'],
                                         callback_data=f'annlist t {buttons[type_operation]["cb"]} {offset}')])
    for an in announcs:
        currency_trade = an.trade_currency
        amount = an.amount
        # pay_curr = an.payment_currency
        pay_curr = PaymentCurrency.select().where(PaymentCurrency.announcement_id == an.id)
        curs = ''
        for curr in pay_curr:
            curs += f'{curr.payment_currency} '
        name = f'{currency_trade} : {to_bip(amount)}'

        kb_list.append([InlineKeyboardButton(name, callback_data=f'open announc {an.id}')])

    if len(all_announc) < 7:
        kb_list.append([InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data=f'annlist back {type_operation} {offset}')])

    else:
        numb_list_l = f'/{math.ceil(len(all_announc) / 7)}'
        numb_list_r = f'/{math.ceil(len(all_announc) / 7)}'
        kb_list.append(
            [InlineKeyboardButton(f'‚áê {numb_list_l}', callback_data=f'annlist left {type_operation} {offset}'),
             InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data=f'annlist back {type_operation} {offset}'),
             InlineKeyboardButton(f'{numb_list_r} ‚áí', callback_data=f'annlist right {type_operation} {offset}')])

    kb = InlineKeyboardMarkup(kb_list)

    return kb


def hold_money(cli, trade):
    announcement = trade.announcement

    trade_currency = announcement.trade_currency
    announc_owner = announcement.user

    owner_wallet = VirtualWallet.get(user_id=announc_owner.id, currency=trade_currency)

    if trade.amount > announcement.amount:
        raise InsufficientFundsOwner('–£ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å –º–µ–Ω—å—à–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–æ–π —Å—É–º–º—ã')

    HoldMoney.create(trade=trade.id, amount=trade.amount)
    log = f'–°–¥–µ–ª–∫–∞ ‚Ññ{trade.id}\n\n' \
        f'–î–µ–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è ‚Ññ{trade.announcement.id}\n' \
        f'–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –≤–ª–∞–¥–µ–ª—å—Ü–∞:\n{to_bip(owner_wallet.balance)} {trade_currency}\n' \
        f'–°—É–º–º–∞ –¥–µ–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {to_bip(trade.amount)} {trade_currency}\n\n'


    old_balance = owner_wallet.balance
    owner_wallet.balance -= trade.amount
    owner_wallet.save()

    try:
        log += f'–ù–æ–≤—ã–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {to_bip(owner_wallet.balance)} {trade_currency}\n\n' \
            f'–í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è:  ```{dt.utcnow()} UTC-0```'
    except Exception as e:
        error_log = f'‚ùå –û—à–∏–±–∫–∞ –¥–µ–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}\n' \
            f'–°–¥–µ–ª–∫–∞ ‚Ññ{trade.id}\n' \
            f'–°—Ç–∞—Ä—ã–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å:\n{old_balance}\n\n' \
            f'–ù–æ–≤—ã–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å:\n{owner_wallet.balance}\n\n' \
            f'–°—É–º–º–∞ –¥–µ–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {to_bip(trade.amount)} {trade_currency}\n\n' \
            f'–í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è:  ```{dt.utcnow()} UTC-0```'
        broadcast_action(cli, error_log)
        raise ValueError('–±–∞–ª–∞–Ω—Å–∞–º –ø–ª–æ—Ö–æ')

    broadcast_action(cli, log)


def auto_trade(cli, trade):
    user = trade.user
    user_wallet = VirtualWallet.get(user_id=user.id, currency=trade.user_currency)

    owner = trade.announcement.user
    owner_name = correct_name(owner)
    user_name = correct_name(user)

    #  –ü—Ä–æ–¥–∞–∂–∞ –∏–ª–∏ –ø–æ–∫—É–ø–∫–∞
    type_operation = trade.announcement.type_operation

    #  –í–∞–ª—é—Ç–∞ –æ–±–º–µ–Ω–∞
    trade_currency = trade.announcement.trade_currency

    #  –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–ª–∞—Ç—ë–∂–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_currency = trade.user_currency

    #  –¶–µ–Ω–∞ –ª–æ—Ç–∞ –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    trade_currency_price = trade.announcement.exchange_rate

    #  –¶–µ–Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç—ã
    cost_payment_currency_in_usd = Decimal(converter.currency_in_usd(user_currency , 1))

    #  –¶–µ–Ω–∞ —Å–¥–µ–ª–∫–∏ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
    price_deal_in_usd = to_bip(trade.amount) * to_bip(trade_currency_price)

    #  –°–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ —é–∑–µ—Ä—É –∑–∞–ø–ª–∞—Ç–∏—Ç—å
    price_deal_in_user_currency = price_deal_in_usd / cost_payment_currency_in_usd

    if user_currency == 'USDT':
        user_currency_wallet = Wallet.get(user_id=user.id, currency='ETH')
    else:
        user_currency_wallet = Wallet.get(user_id=user.id, currency=trade.user_currency)

    log = f'–ù–∞—á–∞–ª–æ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–¥–µ–ª–∫–∏ ‚Ññ{trade.id}\n\n' \
        f'–û–±—ä–≤–ª–µ–Ω–∏–µ ‚Ññ{trade.announcement.id}\n' \
        f'–ê–≤—Ç–æ—Ä –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {owner_name}\n' \
        f'–°—É–º–º–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {to_bip(trade.announcement.amount)} {trade.announcement.trade_currency}\n' \
        f'–¶–µ–Ω–∞ –ª–æ—Ç–∞: {to_bip(trade_currency_price)} USD –∑–∞ 1 {trade_currency}\n\n' \
        f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–¥–µ–ª–∫–∏: {user_name}\n' \
        f'–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏: {type_operation}\n' \
        f'–í–∞–ª—é—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏: {trade.announcement.trade_currency}\n' \
        f'–ü–ª–∞—Ç–µ–∂–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {trade.user_currency}\n' \
        f'–°—É–º–º–∞ —Å–¥–µ–ª–∫–∏: {to_bip(trade.amount)}\n' \
        f'–¶–µ–Ω–∞ —Å–¥–µ–ª–∫–∏ –≤ USD: {price_deal_in_usd}\n' \
        f'–¶–µ–Ω–∞ —Å–¥–µ–ª–∫–∏ –≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ: {price_deal_in_user_currency}\n\n' \
        f'–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–¥–µ–ª–∫–∏:  ```{dt.utcnow()} UTC-0```'
    broadcast_action(cli, log)

    if user_wallet.balance < to_pip(price_deal_in_user_currency):
        txt_error = f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∫–∏\n\n' \
            f'–í–∞—à –±–∞–ª–∞–Ω—Å: {to_bip(user_wallet.balance)} {trade.user_currency}\n' \
            f'–°—É–º–º–∞ –æ–±–º–µ–Ω–∞: {price_deal_in_user_currency} {trade.user_currency}'

        log = f'‚ùå –û—à–∏–±–∫–∞: –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name} –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∫–∏\n\n' \
            f'–°–¥–µ–ª–∫–∞ ‚Ññ{trade.id}\n' \
            f'–¢—Ä–µ–±—É–µ–º–∞—è —Å—É–º–º–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏: {price_deal_in_user_currency} {trade.user_currency}\n' \
            f'–†–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {to_bip(get_balance_from_currency(user_currency_wallet.address, trade.user_currency))}\n' \
            f'–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {to_bip(user_wallet.balance)} {trade.user_currency}\n\n' \
            f'–í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è:  ```{dt.utcnow()} UTC-0```'
        broadcast_action(cli, log)

        raise InsufficientFundsUser(txt_error)

    hold_money(cli, trade)

    if trade.announcement.trade_currency == 'ETH':
        owner_eth_wallet = Wallet.get(user_id=owner.id, currency='ETH')
        user_recipient_address = UserPurse.get(user_id=user.id, currency='ETH').address
        owner_recipient_address = UserPurse.get(user_id=owner.id, currency=trade.user_currency).address
        owner_virtual_wallet_eth = VirtualWallet.get(user_id=owner.id, currency='ETH')

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if trade.user_currency == 'BIP':
            # –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å —Å–¥–µ–ª–∫–∏ —é–∑–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–≤–Ω–µ—Ä—É
            signed_tx = minterAPI.create_transaction(user_currency_wallet, owner_recipient_address,
                                                     to_pip(price_deal_in_user_currency))
            send_tx = minterAPI.send_transaction(signed_tx)
            if 'error' in send_tx and send_tx['error']['tx_result']['code'] == 107:
                err = send_tx['error']['tx_result']['code']['log']

                error_log = f'‚ùå –ü–µ—Ä–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –û—à–∏–±–∫–∞: {err}\n\n' \
                    f'–°–¥–µ–ª–∫–∞ ‚Ññ{trade.id}\n' \
                    f'–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: ```{user_currency_wallet.address}```\n' \
                    f'–ü–æ–ª—É—á–∞—Ç–µ–ª—å: ```{owner_recipient_address}```\n\n' \
                    f'–°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {price_deal_in_user_currency} {trade.user_currency}\n' \
                    f'–†–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {to_bip(minterAPI.get_wallet_balance(user_currency_wallet.address))} BIP\n\n' \
                    f'–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {to_bip(user_wallet.balance)} {trade.user_currency}\n' \
                    f'–í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è:  ```{dt.utcnow()} UTC-0```'
                broadcast_action(cli, error_log)
                raise MinterErrorTransaction(f"{err}\n")

            log = f'‚úÖ –£–¥–∞—á–Ω–∞—è –ø–µ—Ä–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è!\n\n' \
                f'–°–¥–µ–ª–∫–∞ ‚Ññ{trade.id}\n' \
                f'–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: ```{user_currency_wallet.address}```\n' \
                f'–ü–æ–ª—É—á–∞—Ç–µ–ª—å: ```{owner_recipient_address}```\n' \
                f'–°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {price_deal_in_user_currency} {trade.user_currency}\n' \
                f'–ö–æ–º–∏—Å—Å–∏—è: 0.02 BIP\n\n' \
                f'–í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è:  ```{dt.utcnow()} UTC-0```'
            tx_hash = 'Mt' + send_tx['result']['hash'].lower()
            kb = InlineKeyboardButton(f'–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è', url=f'https://minterscan.net/tx/{tx_hash}')
            broadcast_action(cli, log, kb)

            # –í—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å —Å–¥–µ–ª–∫–∏ –æ–≤–Ω–µ—Ä –ø–ª–∞—Ç–∏—Ç —é–∑–µ—Ä—É
            gasPrice = ethAPI.w3.eth.gasPrice
            fee = gasPrice * 21000

            signed_tx2 = ethAPI.create_transaction(owner_eth_wallet.address, user_recipient_address,
                                                   to_bip(trade.amount), owner_eth_wallet.private_key)
            try:
                send_tx2 = ethAPI.send_tx(signed_tx2)

                log = f'‚úÖ –£–¥–∞—á–Ω–∞—è –≤—Ç–æ—Ä–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è!\n\n' \
                    f'–°–¥–µ–ª–∫–∞ ‚Ññ{trade.id}\n' \
                    f'–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: ```{owner_eth_wallet.address}```\n' \
                    f'–ü–æ–ª—É—á–∞—Ç–µ–ª—å: ```{user_recipient_address}```\n' \
                    f'–°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {to_bip(trade.amount)} {trade.announcement.trade_currency}\n' \
                    f'–ö–æ–º–∏—Å—Å–∏—è: {to_bip(fee)} ETH\n\n' \
                    f'–í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è:  ```{dt.utcnow()} UTC-0```'
                tx_hash = send_tx2.transactionHash.hex()
                kb = InlineKeyboardButton(f'–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è', url=f'https://etherscan.io/tx/{tx_hash}')
                broadcast_action(cli, log, kb)

            except ValueError as e:

                error_log = f'‚ùå –í—Ç–æ—Ä–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –û—à–∏–±–∫–∞: {e}\n\n' \
                    f'—É –≤–ª–∞–¥–µ–ª—å—Ü–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏\n' \
                    f'–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: ```{owner_eth_wallet.address}```\n' \
                    f'–ü–æ–ª—É—á–∞—Ç–µ–ª—å: ```{user_recipient_address}```\n' \
                    f'–°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {to_bip(trade.amount)} ETH\n' \
                    f'–†–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –≤–ª–∞–¥–µ–ª—å—Ü–∞: {to_bip(ethAPI.get_balance(owner_eth_wallet.address, "ETH"))} ETH\n' \
                    f'–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –≤–ª–∞–¥–µ–ª—å—Ü–∞: {to_bip(owner_virtual_wallet_eth.balance)} ETH\n\n' \
                    f'–í—Ä–µ–º—è :  ```{dt.utcnow()} UTC-0```'

                broadcast_action(cli, error_log)
                raise ValueError('–£ –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å–¥–µ–ª–∫–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤')

            if send_tx2.status == 0:
                error_log = f'‚ùå –û—à–∏–±–∫–∞: status: 0\n\n' \
                    f'–°–¥–µ–ª–∫–∞ ‚Ññ{trade.id}\n' \
                    f'–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: ```{owner_eth_wallet.address}```\n' \
                    f'–ü–æ–ª—É—á–∞—Ç–µ–ª—å: ```{user_recipient_address}```\n' \
                    f'–°—É–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {to_bip(trade.amount)} ETH\n\n' \
                    f'–í—Ä–µ–º—è :  ```{dt.utcnow()} UTC-0```'
                kb = InlineKeyboardButton(f'–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è', url=f'https://etherscan.io/tx/{tx_hash}')
                broadcast_action(cli, error_log, kb)
                raise EthErrorTransaction('–°—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏ 0')

            close_trade(cli, user, owner, trade, send_tx2.transactionHash.hex(), fee, to_pip(0.02),
                        price_deal_in_user_currency)
            return price_deal_in_user_currency

        if trade.user_currency == 'USDT':
            # –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å —Å–¥–µ–ª–∫–∏ —é–∑–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–≤–Ω–µ—Ä—É
            signed_tx = ethAPI.create_usdt_tx(user_currency_wallet.address, owner_recipient_address, price_deal_in_user_currency, user_currency_wallet.private_key)

            try:
                send_tx = ethAPI.send_tx(signed_tx)

                gasPrice = ethAPI.w3.eth.gasPrice
                fee = gasPrice * send_tx.gasUsed

                log = f'‚úÖ –£–¥–∞—á–Ω–∞—è –ø–µ—Ä–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è!\n\n' \
                    f'–°–¥–µ–ª–∫–∞ ‚Ññ{trade.id}\n' \
                    f'–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: ```{user_currency_wallet.address}```\n' \
                    f'–ü–æ–ª—É—á–∞—Ç–µ–ª—å: ```{owner_recipient_address}```\n' \
                    f'–°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {price_deal_in_user_currency} USDT\n' \
                    f'–ö–æ–º–∏—Å—Å–∏—è: {to_bip(fee)} ETH\n\n' \
                    f'–í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è:  ```{dt.utcnow()} UTC-0```'
                tx_hash = send_tx.transactionHash.hex()
                kb = InlineKeyboardButton(f'–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è', url=f'https://etherscan.io/tx/{tx_hash}')
                broadcast_action(cli, log, kb)

            except ValueError as e:
                error_log = f'‚ùå –û—à–∏–±–∫–∞: {e}\n\n' \
                    f'–°–¥–µ–ª–∫–∞ ‚Ññ{trade.id}\n' \
                    f'–ê–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ```{user_currency_wallet.address}```\n' \
                    f'–ê–¥—Ä–µ—Å –≤–ª–∞–¥–µ–ª—å—Ü–∞ (–ø–æ–ª—É—á–∞—Ç–µ–ª—è): ```{owner_recipient_address}```\n\n' \
                    f'–°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {price_deal_in_user_currency} USDT\n' \
                    f'–†–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {to_bip(ethAPI.get_balance(user_currency_wallet.address, "USDT"))} USDT\n\n' \
                    f'–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {to_bip(user_wallet.balance)} {trade.user_currency}' \
                    f'–í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è:  ```{dt.utcnow()} UTC-0```'
                broadcast_action(cli, error_log)

                raise ValueError('–£ —é–∑–µ—Ä–∞ –Ω–µ —Ö–≤–∞—Ç–∏–ª–æ —Å—Ä–µ–¥—Å—Ç–≤')

            if send_tx.status == 0:
                error_log = f'‚ùå –û—à–∏–±–∫–∞: status: 0\n\n' \
                    f'–°–¥–µ–ª–∫–∞ ‚Ññ{trade.id}\n' \
                    f'–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: ```{user_currency_wallet.address}```\n' \
                    f'–ü–æ–ª—É—á–∞—Ç–µ–ª—å: ```{owner_recipient_address}```\n' \
                    f'–°—É–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {to_bip(trade.amount)} USDT\n\n' \
                    f'–í—Ä–µ–º—è :  ```{dt.utcnow()} UTC-0```'
                tx_hash = send_tx.transactionHash.hex()
                kb = InlineKeyboardButton(f'–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è', url=f'https://etherscan.io/tx/{tx_hash}')
                broadcast_action(cli, error_log, kb)
                raise EthErrorTransaction('–°—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏ 0')

            # –í—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å —Å–¥–µ–ª–∫–∏ –æ–≤–Ω–µ—Ä –ø–ª–∞—Ç–∏—Ç —é–∑–µ—Ä—É
            gasPrice = ethAPI.w3.eth.gasPrice
            fee = gasPrice * 21000

            signed_tx2 = ethAPI.create_transaction(owner_eth_wallet.address, user_recipient_address,
                                                   to_bip(trade.amount), owner_eth_wallet.private_key)
            try:
                send_tx2 = ethAPI.send_tx(signed_tx2)

                log = f'‚úÖ –£–¥–∞—á–Ω–∞—è –≤—Ç–æ—Ä–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è!\n\n' \
                    f'–°–¥–µ–ª–∫–∞ ‚Ññ{trade.id}\n' \
                    f'–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: ```{owner_eth_wallet.address}```\n' \
                    f'–ü–æ–ª—É—á–∞—Ç–µ–ª—å: ```{user_recipient_address}```\n' \
                    f'–°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {to_bip(trade.amount)} {trade.announcement.trade_currency}\n' \
                    f'–ö–æ–º–∏—Å—Å–∏—è: {to_bip(fee)} ETH\n\n' \
                    f'–í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è:  ```{dt.utcnow()} UTC-0```'
                tx_hash = send_tx2.transactionHash.hex()
                kb = InlineKeyboardButton(f'–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è', url=f'https://etherscan.io/tx/{tx_hash}')
                broadcast_action(cli, log, kb)

            except ValueError as e:
                error_log = f'‚ùå –í—Ç–æ—Ä–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –û—à–∏–±–∫–∞: {e}\n\n' \
                    f'—É –≤–ª–∞–¥–µ–ª—å—Ü–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏\n' \
                    f'–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: ```{owner_eth_wallet.address}```\n' \
                    f'–ü–æ–ª—É—á–∞—Ç–µ–ª—å: ```{user_recipient_address}```\n' \
                    f'–°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {to_bip(trade.amount)} ETH\n' \
                    f'–†–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –≤–ª–∞–¥–µ–ª—å—Ü–∞: {to_bip(ethAPI.get_balance(owner_eth_wallet.address, "ETH"))} ETH\n' \
                    f'–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –≤–ª–∞–¥–µ–ª—å—Ü–∞: {to_bip(owner_virtual_wallet_eth.balance)} ETH\n\n' \
                    f'–í—Ä–µ–º—è :  ```{dt.utcnow()} UTC-0```'

                broadcast_action(cli, error_log)
                raise ValueError('–£ –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å–¥–µ–ª–∫–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤')

            if send_tx2.status == 0:
                error_log = f'‚ùå –û—à–∏–±–∫–∞: status: 0\n\n' \
                    f'–°–¥–µ–ª–∫–∞ ‚Ññ{trade.id}\n' \
                    f'–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: ```{owner_eth_wallet.address}```\n' \
                    f'–ü–æ–ª—É—á–∞—Ç–µ–ª—å: ```{user_recipient_address}```\n' \
                    f'–°—É–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {to_bip(trade.amount)} ETH\n\n' \
                    f'–í—Ä–µ–º—è :  ```{dt.utcnow()} UTC-0```'
                kb = InlineKeyboardButton(f'–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è', url=f'https://etherscan.io/tx/{tx_hash}')
                broadcast_action(cli, error_log, kb)
                raise EthErrorTransaction('–°—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏ 0')

            close_trade(cli, user, owner, trade, send_tx2.transactionHash.hex(), fee, to_pip(0.02),
                        price_deal_in_user_currency)
            return price_deal_in_user_currency

    if trade.announcement.trade_currency == 'BIP':

        owner_bip_wallet = Wallet.get(user_id=owner.id, currency='BIP')
        user_recipient_address = UserPurse.get(user_id=user.id, currency='BIP').address
        owner_recipient_address = UserPurse.get(user_id=owner.id, currency=trade.user_currency).address
        owner_virtual_wallet_bip = VirtualWallet.get(user_id=owner.id, currency='BIP')

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if trade.user_currency == 'ETH':
            # –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å —Å–¥–µ–ª–∫–∏ —é–∑–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–≤–Ω–µ—Ä—É
            signed_tx = ethAPI.create_transaction(user_currency_wallet.address, owner_recipient_address, price_deal_in_user_currency, user_currency_wallet.private_key)

            gasPrice = ethAPI.w3.eth.gasPrice
            fee = gasPrice * 21000
            try:
                send_tx = ethAPI.send_tx(signed_tx)

                log = f'‚úÖ –£–¥–∞—á–Ω–∞—è –ø–µ—Ä–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è!\n\n' \
                    f'–°–¥–µ–ª–∫–∞ ‚Ññ{trade.id}\n' \
                    f'–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: ```{user_currency_wallet.address}```\n' \
                    f'–ü–æ–ª—É—á–∞—Ç–µ–ª—å: ```{owner_recipient_address}```\n' \
                    f'–°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {price_deal_in_user_currency} ETH\n' \
                    f'–ö–æ–º–∏—Å—Å–∏—è: {to_bip(fee)} ETH\n\n' \
                    f'–í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è:  ```{dt.utcnow()} UTC-0```'
                tx_hash = send_tx.transactionHash.hex()
                kb = InlineKeyboardButton(f'–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è', url=f'https://etherscan.io/tx/{tx_hash}')
                broadcast_action(cli, log, kb)

            except ValueError as e:

                error_log = f'‚ùå –û—à–∏–±–∫–∞: {e}\n\n' \
                    f'–°–¥–µ–ª–∫–∞ ‚Ññ{trade.id}\n' \
                    f'–ê–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ```{user_currency_wallet.address}```\n' \
                    f'–ê–¥—Ä–µ—Å –≤–ª–∞–¥–µ–ª—å—Ü–∞ (–ø–æ–ª—É—á–∞—Ç–µ–ª—è): ```{owner_recipient_address}```\n\n' \
                    f'–°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {price_deal_in_user_currency} ETH\n' \
                    f'–†–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {to_bip(ethAPI.get_balance(user_currency_wallet.address, "ETH"))} ETH\n\n' \
                    f'–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {to_bip(user_wallet.balance)} {trade.user_currency}' \
                    f'–í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è:  ```{dt.utcnow()} UTC-0```'
                broadcast_action(cli, error_log)

                raise ValueError('–£ —é–∑–µ—Ä–∞ –Ω–µ —Ö–≤–∞—Ç–∏–ª–æ —Å—Ä–µ–¥—Å—Ç–≤')

            if send_tx.status == 0:
                error_log = f'‚ùå –û—à–∏–±–∫–∞: status: 0\n\n' \
                    f'–°–¥–µ–ª–∫–∞ ‚Ññ{trade.id}\n' \
                    f'–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: ```{user_currency_wallet.address}```\n' \
                    f'–ü–æ–ª—É—á–∞—Ç–µ–ª—å: ```{owner_recipient_address}```\n' \
                    f'–°—É–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {to_bip(trade.amount)} ETH\n\n' \
                    f'–í—Ä–µ–º—è :  ```{dt.utcnow()} UTC-0```'
                tx_hash = send_tx.transactionHash.hex()
                kb = InlineKeyboardButton(f'–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è', url=f'https://etherscan.io/tx/{tx_hash}')
                broadcast_action(cli, error_log, kb)
                raise EthErrorTransaction('–°—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏ 0')

            # –í—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å —Å–¥–µ–ª–∫–∏ –æ–≤–Ω–µ—Ä –ø–ª–∞—Ç–∏—Ç —é–∑–µ—Ä—É
            signed_tx2 = minterAPI.create_transaction(owner_bip_wallet, user_recipient_address,
                                                      trade.amount)
            send_tx2 = minterAPI.send_transaction(signed_tx2)
            if 'error' in send_tx2 and send_tx2['error']['tx_result']['code'] == 107:
                error = f"{send_tx2['error']['tx_result']['code']['log']}"

                error_log = f'‚ùå –û—à–∏–±–∫–∞: {error}\n\n' \
                    f'–°–¥–µ–ª–∫–∞ ‚Ññ{trade.id}\n' \
                    f'–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: ```{owner_bip_wallet.address}```\n' \
                    f'–ü–æ–ª—É—á–∞—Ç–µ–ª—å: ```{user_recipient_address}```\n\n' \
                    f'–°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {to_bip(trade.amount)} BIP\n' \
                    f'–†–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: {to_bip(minterAPI.get_wallet_balance(user_currency_wallet.address))} BIP\n\n' \
                    f'–†–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: {to_bip(owner_virtual_wallet_bip.balance)} BIP' \
                    f'–í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è:  ```{dt.utcnow()} UTC-0```'

                broadcast_action(cli, error_log)
                raise MinterErrorTransaction(f"{error}\n")

            log = f'‚úÖ –£–¥–∞—á–Ω–∞—è –≤—Ç–æ—Ä–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è!\n\n' \
                f'–°–¥–µ–ª–∫–∞ ‚Ññ{trade.id}\n' \
                f'–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: ```{owner_bip_wallet.address}```\n' \
                f'–ü–æ–ª—É—á–∞—Ç–µ–ª—å: ```{user_recipient_address}```\n' \
                f'–°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {to_bip(trade.amount)} BIP\n' \
                f'–ö–æ–º–∏—Å—Å–∏—è: 0.02 BIP\n\n' \
                f'–í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è:  ```{dt.utcnow()} UTC-0```'
            tx_hash = 'Mt' + send_tx2['result']['hash'].lower()
            kb = InlineKeyboardButton(f'–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è', url=f'https://minterscan.net/tx/{tx_hash}')
            broadcast_action(cli, log, kb)

            close_trade(cli, user, owner, trade, send_tx.transactionHash.hex(), to_pip(0.02), fee,
                        price_deal_in_user_currency)
            return price_deal_in_user_currency

        if trade.user_currency == 'USDT':
            # –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å —Å–¥–µ–ª–∫–∏ —é–∑–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–≤–Ω–µ—Ä—É
            signed_tx = ethAPI.create_usdt_tx(user_currency_wallet.address, owner_recipient_address, price_deal_in_user_currency, user_currency_wallet.private_key)

            try:
                send_tx = ethAPI.send_tx(signed_tx)

                gasPrice = ethAPI.w3.eth.gasPrice
                fee = gasPrice * send_tx.gasUsed

                log = f'‚úÖ –£–¥–∞—á–Ω–∞—è –ø–µ—Ä–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è!\n\n' \
                    f'–°–¥–µ–ª–∫–∞ ‚Ññ{trade.id}\n' \
                    f'–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: ```{user_currency_wallet.address}```\n' \
                    f'–ü–æ–ª—É—á–∞—Ç–µ–ª—å: ```{owner_recipient_address}```\n' \
                    f'–°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {price_deal_in_user_currency} USDT\n' \
                    f'–ö–æ–º–∏—Å—Å–∏—è: {to_bip(fee)} ETH\n\n' \
                    f'–í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è:  ```{dt.utcnow()} UTC-0```'
                tx_hash = send_tx.transactionHash.hex()
                kb = InlineKeyboardButton(f'–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è', url=f'https://etherscan.io/tx/{tx_hash}')
                broadcast_action(cli, log, kb)

            except ValueError as e:
                error_log = f'‚ùå –û—à–∏–±–∫–∞: {e}\n\n' \
                    f'–°–¥–µ–ª–∫–∞ ‚Ññ{trade.id}\n' \
                    f'–ê–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ```{user_currency_wallet.address}```\n' \
                    f'–ê–¥—Ä–µ—Å –≤–ª–∞–¥–µ–ª—å—Ü–∞ (–ø–æ–ª—É—á–∞—Ç–µ–ª—è): ```{owner_recipient_address}```\n\n' \
                    f'–°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {price_deal_in_user_currency} USDT\n' \
                    f'–†–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {to_bip(ethAPI.get_balance(user_currency_wallet.address, "USDT"))} USDT\n\n' \
                    f'–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {to_bip(user_wallet.balance)} USDT\n\n' \
                    f'–í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è:  ```{dt.utcnow()} UTC-0```'
                broadcast_action(cli, error_log)

                raise ValueError('–£ —é–∑–µ—Ä–∞ –Ω–µ —Ö–≤–∞—Ç–∏–ª–æ —Å—Ä–µ–¥—Å—Ç–≤')

            if send_tx.status == 0:
                error_log = f'‚ùå –û—à–∏–±–∫–∞: status: 0\n\n' \
                    f'–°–¥–µ–ª–∫–∞ ‚Ññ{trade.id}\n' \
                    f'–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: ```{user_currency_wallet.address}```\n' \
                    f'–ü–æ–ª—É—á–∞—Ç–µ–ª—å: ```{owner_recipient_address}```\n' \
                    f'–°—É–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {to_bip(trade.amount)} USDT\n\n' \
                    f'–í—Ä–µ–º—è :  ```{dt.utcnow()} UTC-0```'
                tx_hash = send_tx.transactionHash.hex()
                kb = InlineKeyboardButton(f'–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è', url=f'https://etherscan.io/tx/{tx_hash}')
                broadcast_action(cli, error_log, kb)
                raise EthErrorTransaction('–°—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏ 0')

            # –í—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å —Å–¥–µ–ª–∫–∏ –æ–≤–Ω–µ—Ä –ø–ª–∞—Ç–∏—Ç —é–∑–µ—Ä—É
            signed_tx2 = minterAPI.create_transaction(owner_bip_wallet, user_recipient_address,
                                                      trade.amount)
            send_tx2 = minterAPI.send_transaction(signed_tx2)
            if 'error' in send_tx2 and send_tx2['error']['tx_result']['code'] == 107:
                error = f"{send_tx2['error']['tx_result']['code']['log']}"

                error_log = f'‚ùå –û—à–∏–±–∫–∞: {error}\n\n' \
                    f'–°–¥–µ–ª–∫–∞ ‚Ññ{trade.id}\n' \
                    f'–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: ```{owner_bip_wallet.address}```\n' \
                    f'–ü–æ–ª—É—á–∞—Ç–µ–ª—å: ```{user_recipient_address}```\n\n' \
                    f'–°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {to_bip(trade.amount)} BIP\n' \
                    f'–†–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: {to_bip(minterAPI.get_wallet_balance(user_currency_wallet.address))} BIP\n\n' \
                    f'–†–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: {to_bip(owner_virtual_wallet_bip.balance)} BIP' \
                    f'–í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è:  ```{dt.utcnow()} UTC-0```'

                broadcast_action(cli, error_log)
                raise MinterErrorTransaction(f"{error}\n")

            log = f'‚úÖ –£–¥–∞—á–Ω–∞—è –≤—Ç–æ—Ä–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è!\n\n' \
                f'–°–¥–µ–ª–∫–∞ ‚Ññ{trade.id}\n' \
                f'–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: ```{owner_bip_wallet.address}```\n' \
                f'–ü–æ–ª—É—á–∞—Ç–µ–ª—å: ```{user_recipient_address}```\n' \
                f'–°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {to_bip(trade.amount)} BIP\n' \
                f'–ö–æ–º–∏—Å—Å–∏—è: 0.02 BIP\n\n' \
                f'–í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è:  ```{dt.utcnow()} UTC-0```'
            tx_hash = 'Mt' + send_tx2['result']['hash'].lower()
            kb = InlineKeyboardButton(f'–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è', url=f'https://minterscan.net/tx/{tx_hash}')
            broadcast_action(cli, log, kb)

            close_trade(cli, user, owner, trade, send_tx.transactionHash.hex(), to_pip(0.02), fee,
                        price_deal_in_user_currency)
            return price_deal_in_user_currency

    if trade.announcement.trade_currency == 'USDT':
        owner_usdt_wallet = Wallet.get(user_id=owner.id, currency='ETH')
        user_recipient_address = UserPurse.get(user_id=user.id, currency='USDT').address
        owner_recipient_address = UserPurse.get(user_id=owner.id, currency=trade.user_currency).address
        owner_virtual_wallet_usdt = VirtualWallet.get(user_id=owner.id, currency='USDT')

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if trade.user_currency == 'BIP':
            # –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å —Å–¥–µ–ª–∫–∏ —é–∑–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–≤–Ω–µ—Ä—É
            signed_tx = minterAPI.create_transaction(user_currency_wallet, owner_recipient_address,
                                                     to_pip(price_deal_in_user_currency))
            send_tx = minterAPI.send_transaction(signed_tx)
            if 'error' in send_tx and send_tx['error']['tx_result']['code'] == 107:
                err = send_tx['error']['tx_result']['code']['log']

                error_log = f'‚ùå –ü–µ—Ä–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –û—à–∏–±–∫–∞: {err}\n\n' \
                    f'–°–¥–µ–ª–∫–∞ ‚Ññ{trade.id}\n' \
                    f'–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: ```{user_currency_wallet.address}```\n' \
                    f'–ü–æ–ª—É—á–∞—Ç–µ–ª—å: ```{owner_recipient_address}```\n\n' \
                    f'–°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {price_deal_in_user_currency} {trade.user_currency}\n' \
                    f'–†–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {to_bip(minterAPI.get_wallet_balance(user_currency_wallet.address))} BIP\n\n' \
                    f'–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {to_bip(user_wallet.balance)} BIP' \
                    f'–í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è:  ```{dt.utcnow()} UTC-0```'
                broadcast_action(cli, error_log)
                raise MinterErrorTransaction(f"{err}\n")

            log = f'‚úÖ –£–¥–∞—á–Ω–∞—è –ø–µ—Ä–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è!\n\n' \
                f'–°–¥–µ–ª–∫–∞ ‚Ññ{trade.id}\n' \
                f'–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: ```{user_currency_wallet.address}```\n' \
                f'–ü–æ–ª—É—á–∞—Ç–µ–ª—å: ```{owner_recipient_address}```\n' \
                f'–°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {price_deal_in_user_currency} {trade.user_currency}\n' \
                f'–ö–æ–º–∏—Å—Å–∏—è: 0.02 BIP\n\n' \
                f'–í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è:  ```{dt.utcnow()} UTC-0```'
            tx_hash = 'Mt' + send_tx['result']['hash'].lower()
            kb = InlineKeyboardButton(f'–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è', url=f'https://minterscan.net/tx/{tx_hash}')
            broadcast_action(cli, log, kb)

            # –í—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å —Å–¥–µ–ª–∫–∏ –æ–≤–Ω–µ—Ä –ø–ª–∞—Ç–∏—Ç —é–∑–µ—Ä—É
            signed_tx2 = ethAPI.create_usdt_tx(owner_usdt_wallet.address, user_recipient_address,
                                                   to_bip(trade.amount), owner_usdt_wallet.private_key)
            try:
                send_tx2 = ethAPI.send_tx(signed_tx2)

                gasPrice = ethAPI.w3.eth.gasPrice
                fee = gasPrice * send_tx.gasUsed

                log = f'‚úÖ –£–¥–∞—á–Ω–∞—è –≤—Ç–æ—Ä–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è!\n\n' \
                    f'–°–¥–µ–ª–∫–∞ ‚Ññ{trade.id}\n' \
                    f'–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: ```{owner_usdt_wallet.address}```\n' \
                    f'–ü–æ–ª—É—á–∞—Ç–µ–ª—å: ```{user_recipient_address}```\n' \
                    f'–°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {to_bip(trade.amount)} {trade.announcement.trade_currency}\n' \
                    f'–ö–æ–º–∏—Å—Å–∏—è: {to_bip(fee)} ETH\n\n' \
                    f'–í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è:  ```{dt.utcnow()} UTC-0```'
                tx_hash = send_tx2.transactionHash.hex()
                kb = InlineKeyboardButton(f'–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è', url=f'https://etherscan.io/tx/{tx_hash}')
                broadcast_action(cli, log, kb)

            except ValueError as e:

                error_log = f'‚ùå –í—Ç–æ—Ä–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –û—à–∏–±–∫–∞: {e}\n\n' \
                    f'—É –≤–ª–∞–¥–µ–ª—å—Ü–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏\n' \
                    f'–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: ```{owner_usdt_wallet.address}```\n' \
                    f'–ü–æ–ª—É—á–∞—Ç–µ–ª—å: ```{user_recipient_address}```\n' \
                    f'–°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {to_bip(trade.amount)} ETH\n' \
                    f'–†–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –≤–ª–∞–¥–µ–ª—å—Ü–∞: {to_bip(ethAPI.get_balance(owner_usdt_wallet.address, "USDT"))} USDT\n' \
                    f'–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –≤–ª–∞–¥–µ–ª—å—Ü–∞: {to_bip(owner_virtual_wallet_usdt.balance)} ETH\n\n' \
                    f'–í—Ä–µ–º—è :  ```{dt.utcnow()} UTC-0```'

                broadcast_action(cli, error_log)
                raise ValueError('–£ –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å–¥–µ–ª–∫–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤')

            if send_tx2.status == 0:
                error_log = f'‚ùå –û—à–∏–±–∫–∞: status: 0\n\n' \
                    f'–°–¥–µ–ª–∫–∞ ‚Ññ{trade.id}\n' \
                    f'–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: ```{owner_usdt_wallet.address}```\n' \
                    f'–ü–æ–ª—É—á–∞—Ç–µ–ª—å: ```{user_recipient_address}```\n' \
                    f'–°—É–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {to_bip(trade.amount)} ETH\n\n' \
                    f'–í—Ä–µ–º—è :  ```{dt.utcnow()} UTC-0```'
                kb = InlineKeyboardButton(f'–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è', url=f'https://etherscan.io/tx/{tx_hash}')
                broadcast_action(cli, error_log, kb)
                raise EthErrorTransaction('–°—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏ 0')

            close_trade(cli, user, owner, trade, send_tx2.transactionHash.hex(), fee, to_pip(0.02),
                        price_deal_in_user_currency)
            return price_deal_in_user_currency

        if trade.user_currency == 'ETH':
            # –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å —Å–¥–µ–ª–∫–∏ —é–∑–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–≤–Ω–µ—Ä—É
            signed_tx = ethAPI.create_transaction(user_currency_wallet.address, owner_recipient_address, price_deal_in_user_currency, user_currency_wallet.private_key)

            gasPrice = ethAPI.w3.eth.gasPrice
            fee = gasPrice * 21000
            try:
                send_tx = ethAPI.send_tx(signed_tx)

                log = f'‚úÖ –£–¥–∞—á–Ω–∞—è –ø–µ—Ä–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è!\n\n' \
                    f'–°–¥–µ–ª–∫–∞ ‚Ññ{trade.id}\n' \
                    f'–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: ```{user_currency_wallet.address}```\n' \
                    f'–ü–æ–ª—É—á–∞—Ç–µ–ª—å: ```{owner_recipient_address}```\n' \
                    f'–°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {price_deal_in_user_currency} ETH\n' \
                    f'–ö–æ–º–∏—Å—Å–∏—è: {to_bip(fee)} ETH\n\n' \
                    f'–í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è:  ```{dt.utcnow()} UTC-0```'
                tx_hash = send_tx.transactionHash.hex()
                kb = InlineKeyboardButton(f'–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è', url=f'https://etherscan.io/tx/{tx_hash}')
                broadcast_action(cli, log, kb)

            except ValueError as e:
                error_log = f'‚ùå –û—à–∏–±–∫–∞: {e}\n\n' \
                    f'–°–¥–µ–ª–∫–∞ ‚Ññ{trade.id}\n' \
                    f'–ê–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ```{user_currency_wallet.address}```\n' \
                    f'–ê–¥—Ä–µ—Å –≤–ª–∞–¥–µ–ª—å—Ü–∞ (–ø–æ–ª—É—á–∞—Ç–µ–ª—è): ```{owner_recipient_address}```\n\n' \
                    f'–°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {price_deal_in_user_currency} ETH\n' \
                    f'–†–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {to_bip(ethAPI.get_balance(user_currency_wallet.address, "ETH"))} ETH\n\n' \
                    f'–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {to_bip(user_wallet.balance)} {trade.user_currency}' \
                    f'–í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è:  ```{dt.utcnow()} UTC-0```'
                broadcast_action(cli, error_log)

                raise ValueError('–£ —é–∑–µ—Ä–∞ –Ω–µ —Ö–≤–∞—Ç–∏–ª–æ —Å—Ä–µ–¥—Å—Ç–≤')

            if send_tx.status == 0:
                error_log = f'‚ùå –û—à–∏–±–∫–∞: status: 0\n\n' \
                    f'–°–¥–µ–ª–∫–∞ ‚Ññ{trade.id}\n' \
                    f'–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: ```{user_currency_wallet.address}```\n' \
                    f'–ü–æ–ª—É—á–∞—Ç–µ–ª—å: ```{owner_recipient_address}```\n' \
                    f'–°—É–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {to_bip(trade.amount)} ETH\n\n' \
                    f'–í—Ä–µ–º—è :  ```{dt.utcnow()} UTC-0```'
                tx_hash = send_tx.transactionHash.hex()
                kb = InlineKeyboardButton(f'–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è', url=f'https://etherscan.io/tx/{tx_hash}')
                broadcast_action(cli, error_log, kb)
                raise EthErrorTransaction('–°—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏ 0')

            # –í—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å —Å–¥–µ–ª–∫–∏ –æ–≤–Ω–µ—Ä –ø–ª–∞—Ç–∏—Ç —é–∑–µ—Ä—É
            signed_tx2 = ethAPI.create_usdt_tx(owner_usdt_wallet.address, user_recipient_address,
                                                   to_bip(trade.amount), owner_usdt_wallet.private_key)
            try:
                send_tx2 = ethAPI.send_tx(signed_tx2)

                gasPrice = ethAPI.w3.eth.gasPrice
                fee = gasPrice * send_tx.gasUsed

                log = f'‚úÖ –£–¥–∞—á–Ω–∞—è –≤—Ç–æ—Ä–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è!\n\n' \
                    f'–°–¥–µ–ª–∫–∞ ‚Ññ{trade.id}\n' \
                    f'–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: ```{owner_usdt_wallet.address}```\n' \
                    f'–ü–æ–ª—É—á–∞—Ç–µ–ª—å: ```{user_recipient_address}```\n' \
                    f'–°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {to_bip(trade.amount)} {trade.announcement.trade_currency}\n' \
                    f'–ö–æ–º–∏—Å—Å–∏—è: {to_bip(fee)} ETH\n\n' \
                    f'–í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è:  ```{dt.utcnow()} UTC-0```'
                tx_hash = send_tx2.transactionHash.hex()
                kb = InlineKeyboardButton(f'–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è', url=f'https://etherscan.io/tx/{tx_hash}')
                broadcast_action(cli, log, kb)

            except ValueError as e:

                error_log = f'‚ùå –í—Ç–æ—Ä–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –û—à–∏–±–∫–∞: {e}\n\n' \
                    f'—É –≤–ª–∞–¥–µ–ª—å—Ü–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏\n' \
                    f'–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: ```{owner_usdt_wallet.address}```\n' \
                    f'–ü–æ–ª—É—á–∞—Ç–µ–ª—å: ```{user_recipient_address}```\n' \
                    f'–°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {to_bip(trade.amount)} ETH\n' \
                    f'–†–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –≤–ª–∞–¥–µ–ª—å—Ü–∞: {to_bip(ethAPI.get_balance(owner_usdt_wallet.address, "USDT"))} USDT\n' \
                    f'–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –≤–ª–∞–¥–µ–ª—å—Ü–∞: {to_bip(owner_virtual_wallet_usdt.balance)} ETH\n\n' \
                    f'–í—Ä–µ–º—è :  ```{dt.utcnow()} UTC-0```'

                broadcast_action(cli, error_log)
                raise ValueError('–£ –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å–¥–µ–ª–∫–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤')

            if send_tx2.status == 0:
                error_log = f'‚ùå –û—à–∏–±–∫–∞: status: 0\n\n' \
                    f'–°–¥–µ–ª–∫–∞ ‚Ññ{trade.id}\n' \
                    f'–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: ```{owner_usdt_wallet.address}```\n' \
                    f'–ü–æ–ª—É—á–∞—Ç–µ–ª—å: ```{user_recipient_address}```\n' \
                    f'–°—É–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {to_bip(trade.amount)} ETH\n\n' \
                    f'–í—Ä–µ–º—è :  ```{dt.utcnow()} UTC-0```'
                kb = InlineKeyboardButton(f'–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è', url=f'https://etherscan.io/tx/{tx_hash}')
                broadcast_action(cli, error_log, kb)
                raise EthErrorTransaction('–°—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏ 0')

            close_trade(cli, user, owner, trade, send_tx2.transactionHash.hex(), fee, to_pip(0.02),
                        price_deal_in_user_currency)
            return price_deal_in_user_currency


def close_trade(cli, user, owner, trade, eth_hash,  owner_fee, user_fee, price_deal_in_user_currency):
    HoldMoney.delete().where(HoldMoney.trade_id == trade.id).execute()

    announcement = trade.announcement

    announcement.amount -= trade.amount
    announcement.save()

    owner_wallet = VirtualWallet.get(user_id=owner.id, currency=trade.announcement.trade_currency)
    owner_wallet.balance -= owner_fee
    owner_wallet.save()

    user_wallet = VirtualWallet.get(user_id=user.id, currency=trade.user_currency)
    user_balance = user_wallet.balance
    user_wallet.balance -= to_pip(price_deal_in_user_currency) + user_fee
    user_wallet.save()

    log = f'‚úÖ –£—Å–ø–µ—Ö! –°–¥–µ–ª–∫–∞ ‚Ññ{trade.id}\n\n' \
        f'–°—É–º–º–∞ –ª–æ—Ç–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —Å–¥–µ–ª–∫–∏: {to_bip(announcement.amount)} {announcement.trade_currency}\n' \
        f'–°—É–º–º–∞ –æ–±–º–µ–Ω–∞: {to_bip(trade.amount)} {announcement.trade_currency}\n' \
        f'–¶–µ–Ω–∞ –æ–±–º–µ–Ω–∞: {price_deal_in_user_currency} {trade.user_currency} + fee {to_bip(user_fee)} ETH\n\n' \
        f'–í—Ä–µ–º—è –∑–∞–≤–µ—Ä–µ—à–Ω–∏—è —Å–¥–µ–ª–∫–∏: ```{dt.utcnow()} UTC-0```'

    broadcast_action(cli, log)